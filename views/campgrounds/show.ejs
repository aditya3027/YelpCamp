 <% layout('layouts/boilerplate')%>
<link rel="stylesheet" href="/stylesheets/stars.css">
<style>
    #map {
        height: 49.25rem;  
    }
</style>
<div class="row">
    <div class="col-lg-6">
        <div id="campgroundCarousel" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner">
                <% campground.images.forEach((img, i) => {  %>
                <div class="carousel-item <%= i === 0 ? 'active' : ''%>">
                    <img src="<%= img.url%>" class="d-block w-100" alt="">
                </div>
                <% }) %>

            </div>
            <% if(campground.images.length > 1) {%>
            <button class="carousel-control-prev" type="button" data-bs-target="#campgroundCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
              </button>
              <button class="carousel-control-next" type="button" data-bs-target="#campgroundCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
              </button>
            <% } %>
        </div>
    
        <!-- title -->
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title"><%= campground.title%></h5>
                <p class="card-text"><%= campground.description%></p>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item text-muted"><%= campground.location%></li>
                <li class="list-group-item">Submitted by <%= campground.author.username%></li>
                <li class="list-group-item">$<%= campground.price%>/night</li>
            </ul>
            <%  if( currentUser && campground.author.equals(currentUser._id))  {%>
            <div class="card-body">
                <a class="card-link btn btn-info" href="/campgrounds/<%=campground._id%>/edit">Edit</a>
                <form class="d-inline" action="/campgrounds/<%=campground._id%>?_method=DELETE" method="POST">
                    <button class="btn btn-danger">Delete</button>
                </form>
            </div>
            <% } %>
            <div class="card-footer text-muted">
                2 days ago
            </div>
        </div>

    </div>
    <!-- maps display -->
    <div class="col-lg-6 mb-3">
        <div class="card-body" id="map">
        </div>
    </div>
    <!-- reviews -->
    <div class="col mt-5">
        <% if(currentUser){ %>
        <h2>Leave a Review</h2>
        <form action="/campgrounds/<%=campground._id%>/reviews" method="POST" class="mb-3 validated-form" novalidate>
            <!-- <div class="mb-3">
                <label class="form-label" for="rating">Rating</label>
                <input class="form-range" type="range" min="1" max="5" name="review[rating]" id="rating">
            </div> -->
            <fieldset class="starability-basic">
                <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked
                    aria-label="No rating." />
                <input type="radio" id="first-rate1" name="review[rating]" value="1" />
                <label for="first-rate1" title="Terrible">1 star</label>
                <input type="radio" id="first-rate2" name="review[rating]" value="2" />
                <label for="first-rate2" title="Not good">2 stars</label>
                <input type="radio" id="first-rate3" name="review[rating]" value="3" />
                <label for="first-rate3" title="Average">3 stars</label>
                <input type="radio" id="first-rate4" name="review[rating]" value="4" />
                <label for="first-rate4" title="Very good">4 stars</label>
                <input type="radio" id="first-rate5" name="review[rating]" value="5" />
                <label for="first-rate5" title="Amazing">5 stars</label>
            </fieldset>
            <div class="mb-3">
                <label class="form-label" for="body">Review</label>
                <textarea class="form-control" name="review[body]" id="body" cols="30" rows="3" required></textarea>
                <div class="valid-feedback">
                    Looks good!
                </div>
            </div>
            <button class="btn btn-success">Submit</button>
        </form>
        <% } %>
        <% for(let review of campground.reviews) { %>
        <div class="card mb-3 ">
            <div class="card-body">
                <h5 class="card-title">By <%= review.author.username%></h5>
                <p class="starability-result" data-rating="<%=review.rating%>">
                    Rated: <%= review.rating %> stars
                </p>
                <p class="card-text">Review: <%= review.body %></p>
                <%  if( currentUser && review.author.equals(currentUser._id))  {%>
                <form action="/campgrounds/<%=campground._id%>/reviews/<%=review._id%>?_method=DELETE" method="POST">
                    <button class="btn btn-sm btn-danger">Delete</button>
                </form>
                <% } %>
            </div>
        </div>
        <% } %>
    </div>
</div> 

<script>
    const apiUrl=`https://api.geoapify.com/v1/geocode/search?text=<%= campground.title %>,<%= campground.location %>&lang=en&limit=10&type=city&apiKey=c8fb06fb36f94096a1a07787afef5ad3`;
    var Lattitude,Longitude;
    const getData= async ()=>{
    fetch(apiUrl)
    .then(response => {
    if (!response) {
      throw new Error('Network response was not ok');
    }
    return response.json();
    })
    .then(async (userData) => {
    // Process the retrieved user data
    
        Lattitude=await userData.features[0].geometry.coordinates[0]
        Longitude=await userData.features[0].geometry.coordinates[1];
        maptilersdk.config.apiKey = 'zO4mQJSwlctw09XAxHt4';
        const map = new maptilersdk.Map({
        container: 'map', // container's id or the HTML element in which the SDK will render the map
        style: maptilersdk.MapStyle.STREETS,
        center: [Lattitude, Longitude], // starting position [lng, lat]
        zoom: 12 // starting zoom
    });
    var marker= new maplibregl.Marker()
        .setLngLat([Lattitude,Longitude])
        .addTo(map)
    })
     .catch(error => {
        console.error('Error:', error);
    });
    }
    const data=getData();
</script>

